name: Assignment-4-Workflow-2
 
on:

  pull_request:
    types: [closed]
 
jobs:

  Packer_Build_Image:
    runs-on: ubuntu-latest

    if: github.event.pull_request.merged == true

    env:
      DATABASE: UserDatabase
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}

    name: Building Custom Image
    steps:

      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
 
      - name: Step 2 - zip all the webApp files
        run: |
          zip -r webapp.zip ./
          pwd
          
      - name: check the current
        run: ls -la
 
      - name: Setup google config
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS}}'

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 -e "CREATE DATABASE IF NOT EXISTS $DATABASE;" -u$DATABASE_USERNAME -p$DATABASE_PASSWORD

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"
 
      - name: Run `packer init`
        id: init
        run: packer init .
 
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt main.pkr.hcl
 
      - name: Packer build
        id: build
        run: |
          packer build main.pkr.hcl

      - name: GET Packer Image ID
        id: GET_Packer_Image_Id
        run: |
          PACKER_BUILD_IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $PACKER_BUILD_IMAGE_ID
          echo "Packer_ID=$PACKER_BUILD_IMAGE_ID" >> "$GITHUB_OUTPUT"

      - name: Create instance template
        run: |
          gcloud compute instance-templates create INSTANCE_TEMPLATE_NAME \
            --description="$IT_TEMPLATE_DESCRIPTION" \
            --machine-type="$VIRTUAL_MACHINE_TYPE" \
            --region="$REGION" \
            --disk=source-image="$VIRTUAL_MACHINE_IMAGE",disk-size-gb="$VIRTUAL_MACHINE_DISK_SIZE_GB",disk-type="$VIRTUAL_MACHINE_DISK_TYPE",auto-delete="$IT_DISK_AUTO_DELETE",boot="$IT_DISK_BOOT",disk-encryption-key-kms-key="$KMS_KEY_SELF_LINK" \
            --can-ip-forward="$IT_CAN_IP_FORWARD" \
            --network-interface=network="$VPC_NETWORK_ID",subnetwork="$WEBAPP_SUBNETWORK_SELF_LINK" \
            --tags="$VM_TAG" \
            --metadata=metadata-startup-script="$STARTUP_SCRIPT"

        env:
          IT_TEMPLATE_DESCRIPTION : ${{secrets.IT_TEMPLATE_DESCRIPTION}} 
          VIRTUAL_MACHINE_TYPE: ${{secrets.VIRTUAL_MACHINE_TYPE}}
          REGION: ${{secrets.REGION}}
          VIRTUAL_MACHINE_IMAGE: ${{secrets.PACKER_BUILD_IMAGE_ID}}
          VIRTUAL_MACHINE_DISK_SIZE_GB: ${{ secrets.VIRTUAL_MACHINE_DISK_SIZE_GB }}
          VIRTUAL_MACHINE_DISK_TYPE: ${{ secrets.VIRTUAL_MACHINE_DISK_TYPE }}
          IT_DISK_AUTO_DELETE: ${{ secrets.IT_DISK_AUTO_DELETE }}
          IT_DISK_BOOT: ${{ secrets.IT_DISK_BOOT }}
          KMS_KEY_SELF_LINK: ${{ secrets.KMS_KEY_SELF_LINK }}
          IT_CAN_IP_FORWARD: ${{ secrets.IT_CAN_IP_FORWARD }}
          VPC_NETWORK_ID: ${{ secrets.VPC_NETWORK_ID }}
          WEBAPP_SUBNETWORK_SELF_LINK: ${{ secrets.WEBAPP_SUBNETWORK_SELF_LINK }}
          VM_TAG: ${{ secrets.VM_TAG }}
          STARTUP_SCRIPT: ${{ secrets.STARTUP_SCRIPT }}


















        





  
     
