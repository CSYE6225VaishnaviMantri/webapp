name: Continous-Integration-And-Continous-Deployment
 
on:

  pull_request:
    types: [closed]
 
jobs:

  Packer_Build_Image:
    runs-on: ubuntu-latest

    if: github.event.pull_request.merged == true

    env:
      DATABASE: UserDatabase
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      

    name: Building Custom Image
    steps:

      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
 
      - name: Step 2 - zip all the webApp files
        run: |
          zip -r webapp.zip ./
          pwd
          
      - name: check the current
        run: ls -la
 
      - name: Setup google config
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS}}'

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 -e "CREATE DATABASE IF NOT EXISTS $DATABASE;" -u$DATABASE_USERNAME -p$DATABASE_PASSWORD

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"
 
      - name: Run `packer init`
        id: init
        run: packer init .
 
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt main.pkr.hcl
 
      - name: Packer build
        id: build
        run: |
          packer build main.pkr.hcl

      - name: GET Packer Image ID
        id: GET_Packer_Image_Id
        run: |
          PACKER_BUILD_IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $PACKER_BUILD_IMAGE_ID
          echo "PACKER_BUILD_IMAGE_ID=$PACKER_BUILD_IMAGE_ID" >> "$GITHUB_OUTPUT"
          echo NEW_IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
      
      - name: Check Packer Image ID
        run: echo $PACKER_BUILD_IMAGE_ID

      - name: Create instance template
        env:
            Project_ID: ${{secrets.Project_ID}}
            IT_TEMPLATE_DESCRIPTION : ${{secrets.IT_TEMPLATE_DESCRIPTION}} 
            VIRTUAL_MACHINE_TYPE: ${{secrets.VIRTUAL_MACHINE_TYPE}}
            REGION: ${{secrets.REGION}}
            STARTUP_SCRIPT: ${{ secrets.STARTUP_SCRIPT }}
            MAINTENANCE_POLICY: ${{secrets.MAINTENANCE_POLICY}}
            PROVISIONING_MODEL: ${{secrets.PROVISIONING_MODEL}}
            SERVICE_ACCOUNT: ${{secrets.SERVICE_ACCOUNT}}
            SCOPES: ${{secrets.SCOPES}}
            VM_TAG: ${{secrets.VM_TAG }}
            VIRTUAL_MACHINE_IMAGE: ${{env.PACKER_BUILD_IMAGE_ID}}
            VIRTUAL_MACHINE_DISK_SIZE_GB: ${{secrets.VIRTUAL_MACHINE_DISK_SIZE_GB}}
            VIRTUAL_MACHINE_DISK_TYPE: ${{secrets.VIRTUAL_MACHINE_DISK_TYPE}}
            IT_DISK_AUTO_DELETE: ${{ secrets.IT_DISK_AUTO_DELETE}}
            IT_DISK_BOOT: ${{secrets.IT_DISK_BOOT}}
            KMS_KEY_SELF_LINK: ${{secrets.KMS_KEY_SELF_LINK}}
            DEVICE_NAME:  ${{secrets.DEVICE_NAME}}
            INSTANCE_TEMPLATE_NAME: ${{secrets.INSTANCE_TEMPLATE_NAME}} 
            NETWORK_TIER: ${{secrets.NETWORK_TIER}}
            SUBNET: ${{secrets.SUBNET}}

        run: |
          gcloud compute instance-templates create $INSTANCE_TEMPLATE_NAME  \
            --project=$Project_ID \
            --description="$IT_TEMPLATE_DESCRIPTION" \
            --instance-template-region="$REGION" \
            --machine-type="$VIRTUAL_MACHINE_TYPE" \
            --network-interface="network-tier=$NETWORK_TIER,subnet=$SUBNET" \
            --metadata="startup-script=$STARTUP_SCRIPT" \
            --maintenance-policy="$MAINTENANCE_POLICY" \
            --provisioning-model="$PROVISIONING_MODEL" \
            --service-account="$SERVICE_ACCOUNT" \
            --scopes="$SCOPES" \
            --region="$REGION" \
            --tags="$VM_TAG" \
            --create-disk="auto-delete=$IT_DISK_AUTO_DELETE,boot=$IT_DISK_BOOT,device-name=$DEVICE_NAME,image=${{ env.NEW_IMAGE }},kms-key=$KMS_KEY_SELF_LINK,mode=rw,size=$VIRTUAL_MACHINE_DISK_SIZE_GB,type=$VIRTUAL_MACHINE_DISK_TYPE" \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --reservation-affinity=none

      - name: Update Group Manager
        env:
          INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          INSTANCE_TEMPLATE_NAME: ${{secrets.INSTANCE_TEMPLATE_NAME}}  
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{secrets.PROJECT_ID}}
        run: |
          gcloud compute instance-groups managed set-instance-template \
            $INSTANCE_GROUP_NAME \
            --template=projects/${PROJECT_ID}/regions/${ZONE_OR_REGION}/instanceTemplates/${INSTANCE_TEMPLATE_NAME} \
            --region=${ZONE_OR_REGION} \
            --project=${PROJECT_ID}


      - name: Starting Rolling Update
        env:
          INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          INSTANCE_TEMPLATE_NAME: ${{secrets.INSTANCE_TEMPLATE_NAME}}  
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run : |
           gcloud compute instance-groups managed rolling-action start-update ${{ env.INSTANCE_GROUP_NAME }} \
            --version=template=projects/${{ env.PROJECT_ID }}/regions/${{ env.ZONE_OR_REGION }}/instanceTemplates/$INSTANCE_TEMPLATE_NAME \
            --max-surge=5 \
            --region=${{ env.ZONE_OR_REGION }} \
            --project=${{ env.PROJECT_ID }}
   
      - name: Monitor instance group update
        env:
          INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          INSTANCE_TEMPLATE_NAME: ${{secrets.INSTANCE_TEMPLATE_NAME}}  
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          status="RUNNING"
          while [ "$status" != "True" ]; do
          status=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region=$ZONE_OR_REGION --project=$PROJECT_ID --format="value(status.versionTarget.isReached)")
          sleep 10
          done
      
      - name: Workflow Status Message
        if: success()
        run: echo "Successful CI"

      - name: Workflow Failure Status Message
        if: failure()
        run: echo "Build failed"

      - name: Show Build Status
        run: echo "Build Status:" ${{ job.status }}
